
Curso Spring Boot & MVC com Thymeleaf (Udemy - 27/07/2018)

Seção 1:
	
	Aula 1 - Introdução : Visão geral do Projeto que vai ser desenvolvido.

		- Ferramentas que vão ser utilizadas:

			* Spring Tool Suite (IDE - STS).

			* Banco de dados MySql: Servidor Community Server 5.5.6 e Ferramenta Workbench.

		- Material de apoio.

		- Colocar o projeto no github: 
		
			* Vídeo aula sobre o git e github. 
			
			* O git é um sistema de versionamento distribuido.

			* O git tem o kernel desenvolvido em linux e segue arquitetura per to per (ponto a ponto).

			* Configuração do git: https://www.youtube.com/watch?v=yNwh0S0S0bU

				- $>git --version (verificar instalação).
				- $>git config --global user.name (nome do usuário)
				- $>git config --global user.email (email do usuário)
 				- $>git config --lis (exibe a configuração do usuário)
				- $(pasta do projeto)>git init (inicia o git na pasta indicada)
				- $(pasta do projeto)>git status (exibe informações sobre a pasta do projeto)
				- $(pasta do projeto)>git add . (incluir todos os arquivos modificados para área stage pronto para realizar 
				commiti)
				- $(pasta do projeto)>git commit -m "mensagem do commit" (commit dos arquivos da área de stage)
				- $(pasta do projeto)>git log (exibe o histórico do git na pasta indicada)
				- O vídeo mostra (16:50) como configurar o git para ignorar arquivos que não precisam ser
				versionados(ignorados pelo git).
				- Para remover o arquivo do git e localmente $(pasta do projeto)>git rm (nome do arquivo). Depois deve ser feito
				$(pasta do projeto)>git commit -m "mensagem", para registrar remoção do arquivo no git.
				- $(pasta do projeto)>git clone https://(endereço do projeto no github) permite fazer uma copia do projeto
				localmente(clone), quando quero transferir do github para minha pasta local.
				- $(pasta do projeto)>git remote add origin https://github.com/lincolnjohn/springbootthymeleaf.git, depois do
				projeto criado no github para vincular com o projeto local
				- $(pasta do projeto)>git push -u origin master (para enviar inicialmente o meu projeto ao github, depois somente
				utilizar git push)
				- $(pasta do projeto)>git pull (sincroniza os arquivos do remoto com o projeto local)


	Aula 2 - Injeção de Dependência:

		* Padrão de Projetos incorporado ao Spring Framework.

		* Diminuir o acoplamento e alta coesão um dos principios da orientação objetos, baixo acoplamento dependência de outras 
		classes e alta coesão ligada a responsbilidade única.

		* Basear a dependência em classes abstratas.

		* Inversão de controle, retira do programador a responsabilidade de criar objetos e passa a um container.

	Aula 3 - Anotações do Spring:

		* @Component identifica um Bean, classe gerenciado pelo Spring Framework.

		* @Repository identifica um Bean, clasee gerenciado pelo Spring Framework to tipo persistente em Banco de dados.

		* @Service identifica um Bean, classe gerenciado pelo Spring Framework que prover um serviço as regras de negócio.

		* @Autowired identifica para o Spring que ele deve injetar a variável anotada na classe em que está declarada.
		Pode ser utilizada em métodos ou no Construtor.


	Aula 4 - O Padrão MVC Model, View e Controller

		- Model : 
			* O model define o modelo ou dominio da aplicação.
			* As regras de negócios da aplicação.
			* Persistência de dados.
		- View:
			* Interação da aplicaçao com usuario.
			* Representa a entrada e saída de dados.
		- Controller:
			* Componente intermediario.
			* Recebe as requisições do usuário.
			* Interage com o Model para buscar resposta ao usuário.

	Aula 5 - Spring MVC:

		* Funciona com um Front Controller (dispatcher servlet).
		* Recebe as requisições dos navegadores envia para uma classe
		controller.
		* A classe controller através de seus métodos se comunica com
		a camada Model onde estao as classes de negocio ou
		êpersistência.
		* A classe model responde a requisição e devolve ao front
		controller indicando qual a view(template) que deve ser
		devolvida com as respostas para o usuário.

	Aula 6 - Anotações do Spring MVC:

		* @Controller transforma uma classe emum Bean do tipo Controller.
		* @RequestMapping usada para mapear URLs de acesso (path)a um controller
		e os métodos conttidos nele, podem também definir verbos HTTP(POST,GET...).
		* @PathVarialble tem objetivo extrair da URL um parâmetro que foi incluido
		como path na URL.
		* @RequestParam tem objetivo de capturar um parâmetro de consulta(Query Param)
		enviado por uma solicitação, um objeto da requisição.
		* @Valid injetar validação back-end via Hibernate Validator, Bean Validation ou
		Spring Validator

	Aula 7 - Objetos de resposta do Spring MVC:

		* ModelMap: Objeto usado para enviar dados a uma página como resposta de uma
		solicitação (forward).
		* ModelAndView: Objeto usado para enviar dados a uma página como resposta de uma
		solicitação pode adicionar uma página como resposta.
		* Respostas forward vão abrir uma página.
		* Redirect é uma operação usada para redirecionar a resposta de uma solicitação
		para outra solicitação. Quando utilizar o Redirect se você quiser pasar informações
		é necessário utilizar o RedirectAttributes e atribuir as informações que você 
		precisa.

	Aula 8 - Spring Boot:
		* Um projeto que facilita o processo de configuração e publicação de nossas 
		aplicações.

	Questionário.

Seção 2 - Iniciando o Desenvolvimento do Projeto:

	Aula 9 - Criando projeto via wizard do STS (IDE do Spring):
		
		* Opção File > New >Spring Starter Project.
		* Selecionar as opções Web, Thymeleaf e DevTools.
		* Na criação do projeto deu erro no update de um biblioteca pelo Maven,
		foi necessário apagar a pasta do repositorio local do Maven.

	Aula 10 - Importando os arquivos Html:
	
		* Baixar os arquivos de templates de páginas Html.
		* Quando trabalhamos com Thymeleaf o diretório padrão para as páginas html
		é resources/templates

[----------------------------------------------------------------------------(31/07/2018)]

	Aula 11 - Incluindo recursos de Webjar:

		* Bibliotecas Jar com suas próprias bibliotecas.
		* Adiciona as bibliotecas do BootStrap, Jquery, Css e etc. nas sua aplicação através de um jar.
		* No site https://www.webjars.org/ você identifica as dependências.
		* Usar a biblioteca de icones https://useiconic.com/
		* Na vídeo aula a dependência do maven para org.webjars está sem versão, como estou usando a versão 2.0.3
		do Springboot, estava dando erro solicitando a versão tive que colocar a dependência com versão:

				<dependency>
					<groupId>org.webjars</groupId>
					<artifactId>webjars-locator</artifactId>
					<version>0.33</version>
				</dependency>
		* No site do WebJar em cada biblioteca vem a referência de como adicionar as bibliotecas webjar em sua aplicação,
		no github dentro do arquivo javaScript, mostra o caminho que deve ser colocado.

	Aula 12 - Testando os links do menu:
	
		* Criar as classes de controller que vão responder aos links do menu da aplicação.

	Aula 13 - Resumo da seção.
	
	Aula 14 - Adicionando o Starter para JPA:

		* Classes de entidades ou dominio.
		* Mapeamento objeto relacional, relacionando a classe com uma tabela no banco de dados.
		* Site de referência para a versão do Spring Boot adotada:
		 https://docs.spring.io/spring-boot/docs/2.0.3.BUILD-SNAPSHOT/reference/html/
		
[----------------------------------------------------------------------------(03/08/2018)]

	Aula 15 - Super classe para Entidade:

		* Criar uma classe abstrata que vai ter atributos e métodos que as outras classes vão herdar.
		* Esta classe vai força as outras classes a definir o tipo do seu id, vamos também implementar
		a interface serializable e as classes filhas dela vão herdar esta interface.
		* Uma classe abstrata so pode ser acessada por herança e não instância.

	Aula 16 - As enntidades Departamento e Cargo:
	
		* O relacionamento departamento e cargo é bi-direcional, onde temos o lado fraco (departamento) e 
		forte sendo este onde fica a chave estrangeira (Cargo).

	Aula 17 - Entidade Endereço:

		* Criando o Enum para descrição e sigla do atributo estado.

	Aula 18 - Entidade Funcionário:
	
		* O relacionameno de funcionario e endereço é do tipo @OneToOne.
		* Quando for incluir, alterar ou excluir um funcionário também o endereço pode ser afetado, então
		temos um efeito do tipo cascata, na entidade.
				
[----------------------------------------------------------------------------(04/08/2018)]
	
	Aula 19 - Resumo da seção.

	Aula 20 - Configurando o Banco de dados:

		* As propriedades do banco de dados devem ser escritas no arquivo application.properties.
		* A propriedade spring.jpa.open-in-view=true habilita no spring boot para tratar a LazyException,
		que acontece quando você tem entidades com relacionamentos 1 para N ou N para N, e a transação é
		fechada antes de finalizar todas as consultas do relacionamento.
		* Incluir o driver do MySql nas dependências do projeto, arquivo pom.xml .
		 










